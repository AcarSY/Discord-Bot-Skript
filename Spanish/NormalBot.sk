# ###############################################################################
# Ejemplo de Skript Discord Bot por Blueyescat
#
# Incluye comandos buenos/√∫tiles (con multiples prefijos) y un sistema de evaluaci√≥n.
#
# Requiere los addons de Skript: Vixio, TuSKe y skQuery
# ###############################################################################

options:
	#Bot Token
	#
	#Obt√©n el token de t√∫ bot en https://discordapp.com/developers
	token: ""
	
	#No le tomes importancia, es el nombre de referencia en el c√≥digo (No es el nombre de usuario en Discord)
	botName: "BotName"

	#Prefijos de comandos
	#
	#S√≠ quieres usar emojis como prefijo en los comandos, obt√©n el c√°racter unicode de este en: https://emojipedia.org
	#Por ejemplo, :apple: en Discord: "üçé"
	#
	#S√≠ quieres usar la etiqueta de menci√≥n como prefijo de comando puedes usar directamente "@nombreDeUsuario"
	prefixes: "! " and "!" # "! " (Sin el espacio) deber√≠a estar antes de "!"
	
	#Discord IDs de 18 d√≠gitos de los usuarios administradores
	#
	#Para m√°s de un administrador deber√≠as usar "or" en vez de "and" en la lista, de la siguiente manera: "", "" or ""
	admins: ""

#Intenta iniciar sesi√≥n a la cuenta del Discord bot cuando Skript es activado
#¬°Requiere reiniciar el servidor!
on skript load:
	login to user with token {@token} with name {@botName}

on guild message received seen by {@botName}:
	#
	#Formato del comando
	#
	loop {@prefixes}:
		if event-string starts with "%loop-value%":
			set {_prefix} to loop-value
			set {_strings::*} to split regex replace all "(.*?)\n```" with "$1 ```" in event-string at " "
			if {_prefix} contains " ":
				set {_command} to {_strings::2}
				delete {_strings::1} and {_strings::2}
			else:
				set {_command} to subtext of {_strings::1} from character (length of {_prefix}) + 1 to length of {_strings::1}
				delete {_strings::1}
			set {_arg::*} to {_strings::*}
			set {_arguments} to join {_arg::*} with " "
			stop loop
	#
	#Variables usadas en el sistema de comandos:
	# {_prefix} - {_command} - {_arguments} - {_arg::<number>}
	#
	if {_command} is set:
		if {_command} is "eval" or "evaluate":
			if event-user is {@admins}:
				if {_arguments} is set:
					#
					#Remueve los espacios en el principio de los argumentos
					#
					set {_arguments} to regex replace "^\s+" with "" in {_arguments}
					#
					#Obtiene el c√≥digo de Skript desde un bloque de c√≥digo (No a√±ad√≠ soporte para bloques de c√≥digo de una l√≠nea)
					#
					if first 3 characters of {_arguments} is "```":
						if last 3 characters of {_arguments} is "```":
							if first 5 characters of {_arguments} is "```vb": #Soporte de resalto de sintaxis de Visual Basic en bloques de c√≥digo
								set {_arguments} to subtext of {_arguments} from character 7 to (length of {_arguments} - 3)
							else:
								set {_arguments} to subtext of {_arguments} from character 4 to (length of {_arguments} - 3)
						else:
							create embed "evaluate"
							set title of embed "evaluate" to ":x: ¬°Bloque de c√≥digo inv√°lido!"
							set color of embed "evaluate" to "RED"
							send embed "evaluate" to channel event-channel with {@botName}
							delete embed "evaluate"
							stop
					#
					#Eval√∫a el c√≥digo de Skript y obtiene los errores s√≠ hay
					#
					evaluate logging in {_errors::*}: {_arguments}
					if {_errors::*} is set:
						#
						#Cambiar el formato de los errores
						#
						loop {_errors::*}:
							set {_parse::*} to loop-value parsed as "%text% \(TuSKe\/evaluate.sk, line %integer%\: %text%'\)"
							add "**L√≠nea %{_parse::2}%:** *%{_parse::1}%*%nl%**>** ``%{_parse::3}%``" to {_lines::*}
						create embed "evaluate"
						set title of embed "evaluate" to ":x: Errores de evaluaci√≥n (%size of {_errors::*}%)"
						set description of embed "evaluate" to join {_lines::*} with nl
						set color of embed "evaluate" to "RED"
						send embed "evaluate" to channel event-channel with {@botName}
						delete embed "evaluate"
		else if {_command} is "clear" or "purge":
			if event-user is {@admins}:
				if {_arguments} parsed as number is set:
					clear {_arguments} parsed as number messages in event-channel with {@botName}
				else:
					reply with ":exclamation: **Uso del comando: %{_prefix}%**%{_command}% <N√∫mero entre 1 y 100>"
			else:
				reply with ":x: ¬°Los administradores son los √∫nicos que pueden usar este comando!"
