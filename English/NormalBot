# ###############################################################################
# Discord Bot Skript example by Blueyescat
#
# Includes good/useful command (multi prefix) and evaluate systems.
#
# Requires Vixio, TuSKe and SkQuery Skript addons
# ###############################################################################

options:
	#Bot Token
	#
	#Get token of your bot from https://discordapp.com/developers
	token: ""
	
	#Not important to change (Not user name in Discord)
	botName: "BotName"

	#Command Prefixes
	#
	#If you want to use emojis in command prefixes, get unicode character of these emojis from: https://emojipedia.org
	#For example :apple: in Discord: "üçé"
	#
	#If you want to use mention tag of your bot in a command prefix you can use directly "@userName"
	prefixes: "! " and "!" # "! " (with space) must come before "!"
	
	#18 digit Discord IDs of admin users
	#
	#For more than one admins you must use "or" instead of "and" on the list like "", "" or ""
	admins: ""

#Tries to login to Discord bot/account only when enabled Skript plugin
#Requires restart server!
on skript load:
	login to user with token {@token} with name {@botName}

on guild message received seen by {@botName}:
	#
	#Command Format
	#
	loop {@prefixes}:
		if event-string starts with "%loop-value%":
			set {_prefix} to loop-value
			set {_strings::*} to split regex replace all "(.*?)\n```" with "$1 ```" in event-string at " "
			if {_prefix} contains " ":
				set {_command} to {_strings::2}
				delete {_strings::1} and {_strings::2}
			else:
				set {_command} to subtext of {_strings::1} from character (length of {_prefix}) + 1 to length of {_strings::1}
				delete {_strings::1}
			set {_arg::*} to {_strings::*}
			set {_arguments} to join {_arg::*} with " "
			stop loop
	#
	#Available variables for command system:
	# {_prefix} - {_command} - {_arguments} - {_arg::<number>}
	#
	if {_command} is set:
		if {_command} is "eval" or "evaluate":
			if event-user is {@admins}:
				if {_arguments} is set:
					#
					#Removes spaces at the beginning of the arguments
					#
					set {_arguments} to regex replace "^\s+" with "" in {_arguments}
					#
					#Gets Skript code from code blocks (I didn't add one line code block support)
					#
					if first 3 characters of {_arguments} is "```":
						if last 3 characters of {_arguments} is "```":
							if first 5 characters of {_arguments} is "```vb": #Visual Basic code language support on code blocks
								set {_arguments} to subtext of {_arguments} from character 7 to (length of {_arguments} - 3)
							else:
								set {_arguments} to subtext of {_arguments} from character 4 to (length of {_arguments} - 3)
						else:
							create embed "evaluate"
							set title of embed "evaluate" to ":x: Invalid code block!"
							set color of embed "evaluate" to "RED"
							send embed "evaluate" to channel event-channel with {@botName}
							delete embed "evaluate"
							stop
					#
					#Evaluates the Skript code and gets errors if there
					#
					evaluate logging in {_errors::*}: {_arguments}
					if {_errors::*} is set:
						#
						#Formats errors output nicely
						#
						loop {_errors::*}:
							set {_parse::*} to loop-value parsed as "%text% \(TuSKe\/evaluate.sk, line %integer%\: %text%'\)"
							add "**Line %{_parse::2}%:** *%{_parse::1}%*%nl%**>** ``%{_parse::3}%``" to {_lines::*}
						create embed "evaluate"
						set title of embed "evaluate" to ":x: Evaluate Errors (%size of {_errors::*}%)"
						set description of embed "evaluate" to join {_lines::*} with nl
						set color of embed "evaluate" to "RED"
						send embed "evaluate" to channel event-channel with {@botName}
						delete embed "evaluate"
		else if {_command} is "clear" or "purge":
			if event-user is {@admins}:
				if {_arguments} parsed as number is set:
					clear {_arguments} parsed as number messages in event-channel with {@botName}
				else:
					reply with ":exclamation: **Command Usage: %{_prefix}%**%{_command}% <Message Number 1-100>"
			else:
				reply with ":x: Only administrators can use this command!"
